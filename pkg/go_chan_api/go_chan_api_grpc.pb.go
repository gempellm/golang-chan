// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/gempellm/go_chan_api/v1/go_chan_api.proto

package go_chan_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoChanApiServiceClient is the client API for GoChanApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoChanApiServiceClient interface {
	// DescribePost - Get post information by post id
	DescribePostV1(ctx context.Context, in *DescribePostV1Request, opts ...grpc.CallOption) (*DescribePostV1Response, error)
	// UploadPost - Upload post to go-chan
	CreatePostV1(ctx context.Context, in *CreatePostV1Request, opts ...grpc.CallOption) (*CreatePostV1Response, error)
	// ListPosts - Get list of attached posts by thread id
	ListPostsV1(ctx context.Context, in *ListPostsV1Request, opts ...grpc.CallOption) (*ListPostsV1Response, error)
	// RemovePost - Remove post by post id
	RemovePostV1(ctx context.Context, in *RemovePostV1Request, opts ...grpc.CallOption) (*RemovePostV1Response, error)
}

type goChanApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoChanApiServiceClient(cc grpc.ClientConnInterface) GoChanApiServiceClient {
	return &goChanApiServiceClient{cc}
}

func (c *goChanApiServiceClient) DescribePostV1(ctx context.Context, in *DescribePostV1Request, opts ...grpc.CallOption) (*DescribePostV1Response, error) {
	out := new(DescribePostV1Response)
	err := c.cc.Invoke(ctx, "/gempellm.go_chan_api.v1.GoChanApiService/DescribePostV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChanApiServiceClient) CreatePostV1(ctx context.Context, in *CreatePostV1Request, opts ...grpc.CallOption) (*CreatePostV1Response, error) {
	out := new(CreatePostV1Response)
	err := c.cc.Invoke(ctx, "/gempellm.go_chan_api.v1.GoChanApiService/CreatePostV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChanApiServiceClient) ListPostsV1(ctx context.Context, in *ListPostsV1Request, opts ...grpc.CallOption) (*ListPostsV1Response, error) {
	out := new(ListPostsV1Response)
	err := c.cc.Invoke(ctx, "/gempellm.go_chan_api.v1.GoChanApiService/ListPostsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChanApiServiceClient) RemovePostV1(ctx context.Context, in *RemovePostV1Request, opts ...grpc.CallOption) (*RemovePostV1Response, error) {
	out := new(RemovePostV1Response)
	err := c.cc.Invoke(ctx, "/gempellm.go_chan_api.v1.GoChanApiService/RemovePostV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoChanApiServiceServer is the server API for GoChanApiService service.
// All implementations must embed UnimplementedGoChanApiServiceServer
// for forward compatibility
type GoChanApiServiceServer interface {
	// DescribePost - Get post information by post id
	DescribePostV1(context.Context, *DescribePostV1Request) (*DescribePostV1Response, error)
	// UploadPost - Upload post to go-chan
	CreatePostV1(context.Context, *CreatePostV1Request) (*CreatePostV1Response, error)
	// ListPosts - Get list of attached posts by thread id
	ListPostsV1(context.Context, *ListPostsV1Request) (*ListPostsV1Response, error)
	// RemovePost - Remove post by post id
	RemovePostV1(context.Context, *RemovePostV1Request) (*RemovePostV1Response, error)
	mustEmbedUnimplementedGoChanApiServiceServer()
}

// UnimplementedGoChanApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoChanApiServiceServer struct {
}

func (UnimplementedGoChanApiServiceServer) DescribePostV1(context.Context, *DescribePostV1Request) (*DescribePostV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePostV1 not implemented")
}
func (UnimplementedGoChanApiServiceServer) CreatePostV1(context.Context, *CreatePostV1Request) (*CreatePostV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostV1 not implemented")
}
func (UnimplementedGoChanApiServiceServer) ListPostsV1(context.Context, *ListPostsV1Request) (*ListPostsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostsV1 not implemented")
}
func (UnimplementedGoChanApiServiceServer) RemovePostV1(context.Context, *RemovePostV1Request) (*RemovePostV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePostV1 not implemented")
}
func (UnimplementedGoChanApiServiceServer) mustEmbedUnimplementedGoChanApiServiceServer() {}

// UnsafeGoChanApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoChanApiServiceServer will
// result in compilation errors.
type UnsafeGoChanApiServiceServer interface {
	mustEmbedUnimplementedGoChanApiServiceServer()
}

func RegisterGoChanApiServiceServer(s grpc.ServiceRegistrar, srv GoChanApiServiceServer) {
	s.RegisterService(&GoChanApiService_ServiceDesc, srv)
}

func _GoChanApiService_DescribePostV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePostV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChanApiServiceServer).DescribePostV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gempellm.go_chan_api.v1.GoChanApiService/DescribePostV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChanApiServiceServer).DescribePostV1(ctx, req.(*DescribePostV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChanApiService_CreatePostV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChanApiServiceServer).CreatePostV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gempellm.go_chan_api.v1.GoChanApiService/CreatePostV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChanApiServiceServer).CreatePostV1(ctx, req.(*CreatePostV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChanApiService_ListPostsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChanApiServiceServer).ListPostsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gempellm.go_chan_api.v1.GoChanApiService/ListPostsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChanApiServiceServer).ListPostsV1(ctx, req.(*ListPostsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChanApiService_RemovePostV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePostV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChanApiServiceServer).RemovePostV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gempellm.go_chan_api.v1.GoChanApiService/RemovePostV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChanApiServiceServer).RemovePostV1(ctx, req.(*RemovePostV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GoChanApiService_ServiceDesc is the grpc.ServiceDesc for GoChanApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoChanApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gempellm.go_chan_api.v1.GoChanApiService",
	HandlerType: (*GoChanApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribePostV1",
			Handler:    _GoChanApiService_DescribePostV1_Handler,
		},
		{
			MethodName: "CreatePostV1",
			Handler:    _GoChanApiService_CreatePostV1_Handler,
		},
		{
			MethodName: "ListPostsV1",
			Handler:    _GoChanApiService_ListPostsV1_Handler,
		},
		{
			MethodName: "RemovePostV1",
			Handler:    _GoChanApiService_RemovePostV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gempellm/go_chan_api/v1/go_chan_api.proto",
}
